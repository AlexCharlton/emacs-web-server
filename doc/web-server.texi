\input texinfo
@c @setfilename emacs-web-server.info
@documentencoding utf-8
@settitle Emacs Web Server (ws) User Manual

@copying
This file documents the Emacs Web Server (ws)

Copyright (C) 2013 Eric Schulte <schulte.eric@@gmail.com>

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with the Invariant Section being ``GNU GENERAL PUBLIC LICENSE,''
A copy of the license is included in the section entitled
``GNU Free Documentation License.''
@end quotation
@end copying

@dircategory Emacs misc features
@direntry
* Emacs Web Server: (ws).      Web Server for Emacs.
@end direntry

@titlepage
@title Emacs Web Server (ws) User Manual
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of the contents at the beginning.
@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top Emacs Web Server User Manual

@insertcopying
@end ifnottex

@menu
* Introduction::                Overview of the Emacs Web Server
* Handlers::                    Handlers respond to HTTP requests
* Requests::                    Getting information on HTTP requests
* Usage Examples::              Examples demonstrating usage
* Function Index::              List of Functions

Appendices

* Copying::                     The GNU General Public License gives
                                you permission to redistribute GNU Emacs on
                                certain terms; it also explains that there is
                                no warranty.
* GNU Free Documentation License::  The license for this documentation.
* Index::                       Complete index.




@end menu

@node Introduction, Handlers, Top, Top
@chapter Introduction
@cindex introduction

The Emacs Web Server is a Web server implemented entirely in Emacs
Lisp.  HTTP requests are matched to handlers (@pxref{Handlers}) which
are Emacs Lisp functions.  Handlers receive as their only argument a
request object (@pxref{Requests}) which holds information about the
request and a process holding the HTTP network connection.  Handlers
write their responses directly to the network process.

A number of examples (@pxref{Usage Examples}) demonstrate usage of the
Emacs Web Server.  All public functions of the Emacs Web Server are
listed (@pxref{Function Index}).

@node Handlers, Requests, Handlers, Top
@chapter Handlers
@cindex handlers

The function @code{ws-start} takes takes two arguments
@code{handlers} and @code{port}.  It starts a server listening on
@code{port} responding to requests with @code{handlers}, an
association list composed of pairs of matchers and handler functions.

@section Matchers
@cindex matchers

Matchers may be a regular expression or a function.  Regular
expression matchers consists of an HTTP header and a regular
expression.  When the regular expression matches the content of the
given header the matcher succeeds and the associated handler is
called.  For example the following matches any @code{GET} request
whose path starts with the substring ``foo''.

@example
(:GET . "^foo")
@end example

A function matcher is a function which takes the request object
(@pxref{Requests}) and succeeds when the function returns a non-nil
value.  For example the following matcher matches every request,

@example
(lambda (_) t)
@end example

and the following matches only requests in which the supplied
``number'' parameter is odd.

@example
(lambda (request)
  (oddp (string-to-number (cdr (assoc "number" request)))))
@end example

@section Handler Function
@cindex handler function

Each handler is a function which takes a request object
(@pxref{Requests}) as its only argument.  The function may respond to
the request by writing to the network process held in the
@code{process} field of the request object.  For example, the
@code{process-send-string} function may be used to write string data
to a request as in the following.

@example
  (process-send-string (process request) "hello world")
@end example

When the handler function exits the connection is terminated unless
the handler function returns the keyword @code{:keep-alive}.

@node Requests, Usage Examples, Handlers, Top
@chapter Requests
@cindex requests

Each HTTP requests is represented using an @code{ws-request} object
(@pxref{ws-request}).  The request object is used to decide which
handler to call, and is passed as an argument to the called handler.
The request object holds the network process, all HTTP headers, and
any parameters.

The text of the request is parsed into an alist.  HTML Headers are
keyed using uppercase keywords (e.g., @code{:GET}), and user supplied
parameters are keyed using the string name of the parameter.

@node Usage Examples, Hello World, Requests, Top
@chapter Usage Examples
@cindex usage examples

These examples demonstrate usage.
@menu
* Hello World::                 Serve ``Hello World'' to every request
* Hello World UTF8::            Serve ``Hello World'' w/UTF8 encoding
* Hello World HTML::            Serve ``Hello World'' in HTML
* File Server::                 Serve files from a document root
* URL Parameter Echo::          Echo Parameters from a URL query string
* POST Echo::                   Echo POST parameters back
* Basic Authentication::        BASIC HTTP Authentication
* Org-mode Export::             Export files to HTML and Tex
* File Upload::                 Upload files and return their sha1sum
@end menu

@node Hello World, Hello World UTF8, Usage Examples, Usage Examples
@section Hello World

The simplest possible ``hello world'' example.  The handler consists
of a single (matcher . handler) pair.  The function matcher matches
@emph{every} incoming HTTP request.  The handler responds by setting
the content type to @code{text/plain}, and then sending the string
``hello world''.  When the handler exits the network connection of the
request is closed.

@verbatiminclude ../examples/0-hello-world.el

@node Hello World UTF8, Hello World HTML, Hello World, Usage Examples
@section Hello World UTF8

This example only differs from the previous in that the
``Content-type'' indicates UTF8 encoded data, and the hello world sent
is selected at random from a list of different languages.

@verbatiminclude ../examples/1-hello-world-utf8.el

@node Hello World HTML, File Server, Hello World UTF8, Usage Examples
@section Hello World HTML
@verbatiminclude ../examples/2-hello-world-html.el

This variation of the ``hello world'' example sends a @code{text/html}
response instead of a simple @code{text/plain} response.

@node File Server, URL Parameter Echo, Hello World HTML, Usage Examples
@section File Server

The following example implements a file server which will serve files
from the @code{docroot} document root set to the current working
directory in this example.  Three helper functions are used;
@code{ws-subdirectoryp} is used to check if the requested path is
within the document root, if so the file is served and
@code{ws-send-file} is used to appropriately set the mime-type of the
response based on the extension of the file, if not then
@code{ws-send-404} is used to send a default ``File Not Found''
response.

@verbatiminclude ../examples/3-file-server.el

@node URL Parameter Echo, POST Echo, File Server, Usage Examples
@section URL Parameter Echo

This example demonstrates access of URL-encoded parameters in a
@code{GET} request.  For example the following URL
@url{http://localhost:9005/example?foo=bar&baz=qux} will render as
the following HTML table.

@multitable @columnfractions .5 .5
@item foo @tab bar
@item baz @tab qux
@end multitable

@verbatiminclude ../examples/4-url-param-echo.el

@node POST Echo, Basic Authentication, URL Parameter Echo, Usage Examples
@section POST Echo

The following example echos back the content of the ``message'' field
in a @code{POST} request.

@verbatiminclude ../examples/5-post-echo.el

@node Basic Authentication, Org-mode Export, POST Echo, Usage Examples
@section Basic Authentication

The following example demonstrates BASIC HTTP authentication.  The
handler prompts an unauthenticated client for authentication by
sending a ``WWW-Authenticate'' header.

@example
(ws-response-header process 401
  '("WWW-Authenticate" . "Basic realm=\"example\"")
  '("Content-type" . "text/plain"))
@end example

The client replies by setting the ``Authorization'' HTTP header which
is parsed into a list of the form @code{(PROTOCOL USERNAME
. PASSWORD)}.  Currently only BASIC HTTP authentication is supported.

@noindent
Note: BASIC HTTP authentication passes user credentials in plain text
between the client and the server and should generally only be used
with HTTPS network encryption.  While the Emacs web server currently
doesn't support HTTPS network encryption it may be run behind an HTTPS
proxy server (e.g., Apache or Nginx) with HTTPS support.

@verbatiminclude ../examples/6-basic-authentication.el

@node Org-mode Export, File Upload, Basic Authentication, Usage Examples
@section Org-mode Export

The following example exports a directory of Org-mode files as either
text, HTML or LaTeX.  The Org-mode export engine is used to export
files on-demand as they are requested.

@verbatiminclude ../examples/7-org-mode-file-server.el

@node File Upload, Function Index, Org-mode Export, Usage Examples
@section File Upload

The following example demonstrates accessing an uploaded file.  This
simple server accesses the file named ``file'' and returns it's
sha1sum and file name.

@verbatiminclude ../examples/8-file-upload.el

A file may be uploaded from an HTML form, or using the @code{curl}
program as in the following example.

@example
$ curl -s -F file=@/usr/share/emacs/24.3/etc/COPYING localhost:9008
8624bcdae55baeef00cd11d5dfcfa60f68710a02  COPYING
$ sha1sum /usr/share/emacs/24.3/etc/COPYING
8624bcdae55baeef00cd11d5dfcfa60f68710a02  /usr/share/emacs/24.3/etc/COPYING
@end example

@node Function Index, Copying, Usage Examples, Top
@chapter Function Index
@cindex function index

The following functions implement the Emacs Web Server public API.

@section Objects
The following objects represent web servers and requests.

@anchor{ws-server}
@deftp Class ws-server handlers process port requests
Every Emacs web server is an instance of the @code{ws-server} class.
Each instance includes the @code{handlers} association list and
@code{port} passed to @code{ws-start}, as well as the server network
@code{process} and a list of all active @code{requests}.
@end deftp

@anchor{ws-request}
@deftp Class ws-request process pending context boundary headers
The @code{ws-request} class represents an active web request.  The
@code{process} field holds the network process of the client machine
and may be used by handlers to respond to requests.  The
@code{headers} field holds an alist of information on the request for
use by handlers.  The remaining @code{pending}, @code{context} and
@code{boundary} fields are used to maintain header parsing information
across calls to the @code{ws-filter} function.
@end deftp

@section Starting and Stopping Servers
@cindex start and stop
The following functions start and stop Emacs web servers.  The
@code{ws-servers} list holds all running servers.

@anchor{ws-start}
@defun ws-start handlers port &optional log-buffer &rest network-args
@code{ws-start} starts a server listening on @code{port} using
@code{handlers} (@pxref{Handlers}) to match and respond to requests.
An instance of the @code{ws-server} class is returned.
@end defun

@anchor{ws-servers}
@defvar ws-servers
The @code{ws-servers} list holds all active Emacs web servers.
@end defvar

@anchor{ws-stop}
@defun ws-stop server
@code{ws-stop} stops @code{server} deletes all related processes, and
frees the server's port.  Evaluate the following to stop all emacs web
servers.
@example
(mapc #'ws-stop ws-servers)
@end example
@end defun

@section Convenience Functions
The following convenience functions automate many common tasks
associated with responding to HTTP requests.

@anchor{ws-response-header}
@cindex content type
@defun ws-response-header process code &rest header
Send the headers required to start an HTTP response to @code{process}.
@code{process} should be a @code{ws-request} @code{process} of an
active request.  For example start a standard 200 ``OK'' HTML response
with the following.

@example
(ws-response-header process 200 '("Content-type" . "text/html"))
@end example

The encoding may optionally be set in the HTTP header.  Send a UTF8
encoded response with the following.

@example
(ws-response-header process 200
            '("Content-type" . "text/plain; charset=utf-8"))
@end example

@end defun

@anchor{ws-send-500}
@defun ws-send-500 process &rest msg-and-args
@code{ws-send-500} sends a default 500 ``Internal Server Error''
response to @code{process}.
@end defun

@anchor{ws-send-404}
@defun ws-send-404 process &rest msg-and-args
@code{ws-send-500} sends a default 404 ``File Not Found'' response to
@code{process}.
@end defun

@anchor{ws-send-file}
@defun ws-send-file process path &optional mime-type
@code{ws-send-file} sends the file located at @code{path} to
@code{process}.  If the optional @code{mime-type} is not set, then the
mime-type is determined by calling @code{mm-default-file-encoding} on
@code{path} or is set to ``application/octet-stream'' if no mime-type
can be determined.
@end defun

@anchor{ws-in-directory-p}
@defun ws-in-directory-p parent path
Check if @code{path} is under the @code{parent} directory.

@example
(ws-in-directory-p "/tmp/" "pics")
    @result{} "/tmp/pics"

(ws-in-directory-p "/tmp/" "..")
    @result{} nil

(ws-in-directory-p "/tmp/" "~/pics")
    @result{} nil
@end example
@end defun

@node Copying, GNU Free Documentation License, Function Index, Top
@appendix GNU GENERAL PUBLIC LICENSE
@include gpl.texi

@node GNU Free Documentation License, Index, Copying, Top
@appendix GNU Free Documentation License
@include doclicense.texi

@node Index,  , GNU Free Documentation License, Top
@unnumbered Index

@c Combine all index (function variable type and concept) types into a
@c single index.
@syncodeindex fn cp
@syncodeindex vr cp
@syncodeindex tp cp
@printindex cp

@bye
